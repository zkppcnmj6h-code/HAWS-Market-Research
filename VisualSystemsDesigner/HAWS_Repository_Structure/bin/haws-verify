#!/usr/bin/env bash
# haws-verify — governance preflight for HAWS
set -euo pipefail

# --- helpers ---
bold()   { printf "\033[1m%s\033[0m\n" "$*"; }
green()  { printf "✔ %s\n" "$*"; }
yellow() { printf "⚠ %s\n" "$*"; }
red()    { printf "✖ %s\n" "$*"; }

# --- ensure we are in a git repo root ---
ROOT="$(git rev-parse --show-toplevel 2>/dev/null || true)"
if [[ -z "${ROOT}" ]]; then
  red "Not a git repository."
  exit 1
fi
cd "$ROOT"

bold "HAWS verify @ $ROOT"

# --- branch checks ---
BRANCH="$(git rev-parse --abbrev-ref HEAD)"
echo "Branch: $BRANCH"

if [[ "$BRANCH" == "main" || "$BRANCH" == "master" ]]; then
  red "Protected branch 'main'. Create/switch to a working branch (e.g., sprint-3-readsync)."
  exit 2
else
  green "On working branch."
fi

# --- working tree must be clean ---
if [[ -n "$(git status --porcelain)" ]]; then
  red "Working tree not clean."
  git status -sb
  exit 3
else
  green "Working tree clean."
fi

# --- upstream + unpushed commits ---
if git rev-parse --abbrev-ref --symbolic-full-name "@{u}" >/dev/null 2>&1; then
  if [[ -n "$(git log --oneline '@{u}..')" ]]; then
    yellow "Unpushed commits present."
  else
    green "No unpushed commits."
  fi
else
  yellow "No upstream configured for '$BRANCH'."
  yellow "No remote branch 'origin/$BRANCH' yet."
fi

# --- governance files (support both canonical + VisualSystemsDesigner paths) ---
POLICY_CANDIDATES=(
  "HAWS_00_ADMIN_CORE/01_Master_Documents/Governance_Addendum_AI_Repo_Access.md"
  "VisualSystemsDesigner/HAWS_Repository_Structure/HAWS_00_ADMIN_CORE/01_Master_Documents/Governance_Addendum_AI_Repo_Access.md"
)
SCOPE_CANDIDATES=(
  "HAWS_00_ADMIN_CORE/01_Master_Documents/ai_access_scope.yaml"
  "VisualSystemsDesigner/HAWS_Repository_Structure/HAWS_00_ADMIN_CORE/01_Master_Documents/ai_access_scope.yaml"
)
SIGDIR_CANDIDATES=(
  "HAWS_00_ADMIN_CORE/01_Master_Documents/.signed"
  "VisualSystemsDesigner/HAWS_Repository_Structure/HAWS_00_ADMIN_CORE/01_Master_Documents/.signed"
)

pick_first_existing() {
  for p in "$@"; do
    [[ -e "$p" ]] && { echo "$p"; return 0; }
  done
  return 1
}

POLICY="$(pick_first_existing "${POLICY_CANDIDATES[@]}" || true)"
SCOPE="$(pick_first_existing "${SCOPE_CANDIDATES[@]}" || true)"
SIGDIR="$(pick_first_existing "${SIGDIR_CANDIDATES[@]}" || true)"

if [[ -z "${POLICY:-}" ]]; then
  red "Governance policy missing: expected at one of:"
  printf ' - %s\n' "${POLICY_CANDIDATES[@]}"
  exit 4
else
  green "Policy found: $POLICY"
fi

if [[ -z "${SCOPE:-}" ]]; then
  red "ai_access_scope.yaml missing: expected at one of:"
  printf ' - %s\n' "${SCOPE_CANDIDATES[@]}"
  exit 4
else
  green "Scope found: $SCOPE"
fi

if [[ -z "${SIGDIR:-}" || -z "$(echo "$SIGDIR"/*.sig 2>/dev/null || true)" ]]; then
  yellow "No signatures found in .signed/ (optional for local checks)."
else
  green "Signatures present in: $SIGDIR"
fi

# --- quick scope sanity (just show allowed paths) ---
if command -v awk >/dev/null 2>&1; then
  ALLOWED="$(awk '/^allowed_paths:/,0 { if ($1 ~ /^-/) print $2 }' "$SCOPE" || true)"
  if [[ -n "$ALLOWED" ]]; then
    echo "Allowed paths in scope:"
    printf ' - %s\n' $ALLOWED
  fi
fi

green "Governance gate passed."
bold "haws-verify: OK"
